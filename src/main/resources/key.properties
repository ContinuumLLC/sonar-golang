###############################################################################
# Copyright 2017 - Universit√© d'Artois
#
# This file is part of SonarQube Golang plugin (sonar-golang).
#
# Sonar-golang is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Sonar-golang is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Sonar-golang.  If not, see <http://www.gnu.org/licenses/>.
#
# Contributors:
#            Thibault Falque (thibault_falque@ens.univ-artois.fr)
###############################################################################
#golint\:ExportedType=exported type [a-zA-Z0-9]+ should have comment or be unexported
golint\:FormComment=comment on exported [a-zA-Z0-9]+ [a-zA-Z0-9\.]+ should be of the form "[a-zA-Z\.]+ *\t*..."
golint\:AllCaps=don't use ALL_CAPS in Go names; use CamelCase
golint\:UnderscoreInPackageName=don't use an underscore in package name
golint\:LeadingK=don't use leading k in Go names; [a-zA-Z0-9]+ [a-zA-Z0-9]+ should be [a-zA-Z0-9]+
golint\:UnderscoreInGoName=don't use underscores in Go names; [a-zA-Z0-9]+ [a-zA-Z0-9_]+ should be [a-zA-Z0-9]+
golint\:ErrorLastReturn=error should be the last type when returning multiple items
golint\:ErrorEndString=error strings should not be capitalized or end with punctuation or a newline
golint\:ErrorVarName=error var [a-zA-Z0-9]+ should have name of the form [a-zA-Z0-9]+
golint\:AnnoyingUseExportedType=exported [a-zA-Z0-9]+ [a-zA-Z0-9]+ returns unexported type [a-zA-Z0-9]+, which can be annoying to use
golint\:IfBlockReturn=if block ends with a return statement, so drop this else and outdent its block
golint\:PackageCommentForm=package comment should be of the form \"[a-zA-Z0-9]+...\"
golint\:PackageCommentSpace=package comment should not have leading space
golint\:ReceiverNameConsistent=receiver name [a-zA-Z0-9]+ should be consistent with previous receiver name [a-zA-Z0-9]+ for [a-zA-Z0-9]+
golint\:ReceiverNameReflection=receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\"
golint\:ReceiverNameNotUnderscore=receiver name should not be an underscore
golint\:DropAssignment=should drop = [a-zA-Z0-9]+ from declaration of var [a-zA-Z0-9]+; it is the zero value
golint\:HavePackageComment=should have a package comment, unless it's in another file for this package
golint\:NotUseBasicType=should not use basic type [a-zA-Z0-9]+ as key in context.WithValue
golint\:NotUseDotImport=should not use dot imports
golint\:Omit2ndValueFromRange=should omit 2nd value from range; this loop is equivalent to `for [a-zA-Z0-9]+ := range ...`
golint\:OmitType=should omit type [a-zA-Z0-9]+ from declaration of var [a-zA-Z0-9]+; it will be inferred from the right-hand side
golint\:ReplaceLintIncDec=should replace [a-zA-Z0-9\-\+=]+ with [a-zA-Z0-9\-\+]+
golint\:ReplaceSprintf=should replace [a-zA-Z0-9\.]+\\(fmt.Sprintf\\(...\\)\\) with [a-zA-Z0-9]+.Errorf\\(...\\)
golint\:Initialisms=[a-zA-Z0-9]+ [a-zA-Z0-9]+ should be [a-zA-Z0-9]+
golint\:PackageNames=[a-zA-Z0-9]+ name will be used as [a-zA-Z0-9]+.[a-zA-Z0-9]+ by other packages, and that stutters; consider calling this [a-zA-Z0-9]+
golint\:BlankImport=a blank import should be only in a main or test package, or have a comment justifying it
golint\:CommentExportedType=comment on exported type [a-zA-Z0-9]+ should be of the form "[a-zA-Z0-9]+ ..." \\(with optional leading article\\)
golint\:ContextContextFirstArg=context.Context should be the first parameter of a function
golint\:ExportedHaveComment=exported [a-zA-Z0-9]+ [a-zA-Z0-9\.]+ should have comment or be unexported
golint\:ExportedHaveComment2=exported [a-zA-Z0-9\.]+ [a-zA-Z0-9\.]+ should have comment[\(\) a-zA-Z0-9]+ or be unexported
golint\:ExportedDeclaration=exported [a-zA-Z0-9]+ [a-zA-Z0-9]+ should have its own declaration
golint\:SpecificSuffix=var [a-zA-Z0-9]+ is of type [a-zA-Z0-9\.]+; don't use unit-specific suffix [a-zA-Z0-9]+
golint\:StructFieldInitialisms=struct field [a-zA-Z0-9]+ should be [a-zA-Z0-9]+
gocyclo\:CyclomaticComplexity=cyclomatic complexity [0-9]+ of function (\\(([a-zA-Z0-9]+ )?\\*?[a-zA-Z0-9]+\\)\\.)?[a-zA-Z0-9]+\\(\\) is high \\(> [0-9]+\\)
errcheck\:ValueNotChecked=error return value not checked .*
unconvert\:UnnecessaryConversion=unnecessary conversion
structcheck\:UnusedStructField=unused struct field \\w+[\\w\\.]*
gosimple\:ChannelInsteadSelect=
ineffassign\:IneffectualAssignment=ineffectual assignment to [a-zA-Z0-9]+
gas\:UnhandledErrors=Errors unhandled\.,LOW,HIGH
goimports\:FileNotImported=file is not goimported
vet\:Unreachable=unreachable code
vet\:Shadow=declaration of "[A-Za-z0-9\\.]+" shadows declaration at [A-Za-z0-9_\\-/]+.go:[0-9]+
vet\:Misuse=possible misuse of unsafe.Pointer
gas\:SQLFormatting=SQL string formatting,MEDIUM,HIGH
gas\:SQLConcatenation=SQL string concatenation,MEDIUM,HIGH
gas\:RSAKeyLength=RSA keys should be at least 2048 bits,MEDIUM,HIGH
gas\:UnsafeCall=Use of unsafe calls should be audited,LOW,HIGH
gas\:UnescapedHTMLTemplates=this method will not auto-escape HTML\. Verify data is well formed\.,MEDIUM,LOW
gas\:WeakCrypto=Use of weak cryptographic primitive,HIGH,HIGH
vet\:Lock=[A-Za-z0-9\.]+ passes lock by value: [A-Za-z0-9\.]+ contains [A-Za-z0-9\.]+
vet\:FormatingPrintfFamily=possible formatting directive in [A-Za-z0-9\.]+ call
durcheck\:TimeDurationMeans=implicit time.Duration means nanoseconds in "[a-zA-Z0-9\(\)\.]+"
prealloc\:Preallocation=Consider preallocating [a-zA-Z0-9_]+
badtime\:MapTimeKey=Reconsider use of [a-zA-Z0-9\\/\\.\\[\\]]+ . Storing an instance of time.Time as part of a map key is not recommended.
badtime\:TimeComparison=[a-zA-Z0-9\\/\\.\\[\\]]+ and [a-zA-Z0-9\\/\\.\\[\\]]+ contain time.Time which can be dangerous to compare with `==`. Consider writing a custom comparison or using the .Equal() method of time.Time.
goconst\:OtherOccur=\d \(other occurrence\(s\) of\) "[a-zA-Z]+" found in: [a-zA-Z0-9\\/\\-\\.\\:]+
goconst\:MatchingConst=A matching constant has been found for "[a-zA-Z0-9]+": [a-zA-Z0-9]+
gosimple\:S1001=should use copy\(\) instead of a loop \(S1001\)
gosimple\:S1002=should omit comparison to bool constant, can be simplified to [a-zA-Z0-9_]+ \(S1002\)
gosimple\:S1000=should use a simple channel send/receive instead of select with a single case \(S1000\)
gosimple\:S1003=should use strings.Contains([a-zA-Z0-9_]+, [a-zA-Z0-9_]+) instead \(S1003\)
gosimple\:S1004=should use bytes.Equal\([a-zA-Z0-9_]+, [a-zA-Z0-9_]+\) instead \(S1004\)
gosimple\:S1005=should omit values from range; this loop is equivalent to `for range ...` \(S1005\)
#gosimple\:S1005Map=should write _ = [a-zA-Z0-9_\[\]]+ instead of _, _ = [a-zA-Z0-9_\[\]]+ \(S1005\)
#gosimple\:S1005Chan='_ = <-[a-zA-Z0-9_]+' can be simplified to '<-[a-zA-Z0-9_]+' \(S1005\)
gosimple\:S1007=should use raw string \(`...`\) with regexp.Compile to avoid having to escape twice \(S1007\)
gosimple\:S1008=should use 'return <expr>' instead of 'if <expr> \\{ return <bool> \\}; return <bool>' \(S1008\)
gosimple\:S1009=should omit nil check; len\(\) for nil slices is defined as zero \(S1009\)
#gosimple\:S1010=should omit second index in slice, [a-zA-Z][[a-zA-Z0-9_\(\)\]\:]+ is identical to [a-zA-Z][[a-zA-Z0-9_\]\:]+ \(S1010\)
#gosimple\:S1011=should replace loop with [a-zA-Z0-9_]+ = append\([a-zA-Z0-9_]+, [a-zA-Z0-9_]+...\) \(S1011\)
gosimple\:S1012=should use time.Since instead of time.Now\(\).Sub \(S1012\)
#gosimple\:S1013='if [a-zA-Z0-9_]+ != nil \\{ return [a-zA-Z0-9_]+ \\}; return nil' can be simplified to 'return [a-zA-Z0-9_]+' \(S1013\)
#gosimple\:S1016=should convert [a-zA-Z0-9_]+ \(type [A-Za-z0-9_]+\) to [A-Za-z0-9_]+ instead of using struct literal \(S1016\)
gosimple\:S1017=should replace this if statement with an unconditional strings.TrimPrefix \(S1017\)
#gosimple\:S1018=should use copy([a-zA-Z0-9_[]:]+, [a-zA-Z0-9_[]:]+) instead (S1018)
gosimple\:S1019Slice=should use make\(\\[\\]int, 0\) instead \(S1019\)
gosimple\:S1019Map=should use make\(map\[int\]int\) instead \(S1019\)
gosimple\:S1019Chan=should use make\(chan int\) instead \(S1019\)
gosimple\:S1021=should merge variable declaration with assignment on next line \(S1021\)
#gosimple\:S1020=when [a-zA-Z0-9_]+ is true, [a-zA-Z0-9_]+ can't be nil \(S1020\)
gosimple\:S1023=redundant return statement \(S1023\)
#gosimple\:S1024=should use time.Until instead of [a-zA-Z0-9_]+.Sub\(time.Now\(\)\) \(S1024\)
gosimple\:S1025ArgIsStr=the argument is already a string, there's no need to use fmt.Sprintf \(S1025\)
gosimple\:S1025TypeIsStr=the argument's underlying type is a string, should use a simple conversion instead of fmt.Sprintf \(S1025\)
gosimple\:S1025StringNotSprintf=should use String\(\) instead of fmt.Sprintf \(S1025\)
gosimple\:S1028=should use fmt.Errorf\(...\) instead of errors.New\(fmt.Sprintf\(...\)\) \(S1028\)
gosimple\:S1029=should range over string, not \\[\\]rune\(string\) \(S1029\)
#gosimple\:S1030StringNotBytes=should use [a-zA-Z0-9_]+.String\(\) instead of string\([a-zA-Z0-9_]+.Bytes\(\)\) \(S1030\)
#gosimple\:S1030BytesNotString=should use [a-zA-Z0-9_]+.Bytes\(\) instead of \[\]byte\([a-zA-Z0-9_]+.String\(\)\) \(S1030\)
gosimple\:S1031=unnecessary nil check around range \(S1031\)
impi\:S2000=Import groups are not in the proper order .*