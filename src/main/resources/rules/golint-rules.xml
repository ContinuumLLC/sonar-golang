<!-- Copyright 2017 - UniversitÃ© d'Artois This file is part of SonarQube 
	Golang plugin (sonar-golang). Sonar-golang is free software: you can redistribute 
	it and/or modify it under the terms of the GNU Lesser General Public License 
	as published by the Free Software Foundation, either version 3 of the License, 
	or (at your option) any later version. Sonar-golang is distributed in the 
	hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
	GNU Lesser General Public License for more details. You should have received 
	a copy of the GNU Lesser General Public License along with Sonar-golang. 
	If not, see <http://www.gnu.org/licenses/>. Contributors: Thibault Falque 
	(thibault_falque@ens.univ-artois.fr) -->
<go-rules>
	<rule>
		<key>golint:FormComment</key>
		<name>Form comment of exported type</name>
		<internalKey>golint:FormComment</internalKey>
		<description>
			<![CDATA[<p>Comment on exported type should be of the form \"Type...\"".</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
//The stuct Foo is for ...
type struct Foo{
}
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
//Foo is for ...
type struct Foo{
}
			</pre>

			<h2>See</h2>
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L761">github.com</a>
				</li>
			</ul>]]>

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:AllCaps</key>
		<name>don't use ALL_CAPS in Go names; use CamelCase</name>
		<internalKey>golint:AllCaps</internalKey>
		<description>
		<![CDATA[<p>don't use ALL_CAPS in Go names; use CamelCase.</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
Foo_BAR := 1
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
fooBar := 1
FooBar:=1//or if the var is exported
			</pre>

			<h2>See</h2>
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L517">github.com</a>
				</li>
				<li>
					<a href="https://golang.org/doc/effective_go.html">golang.org</a>
				</li>
			</ul>]]>

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:UnderscoreInPackageName</key>
		<name>don't use an underscore in package name</name>
		<internalKey>golint:UnderscoreInPackageName</internalKey>
		<description>
			<![CDATA[<p>don't use an underscore in package name.</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
package foo_bar
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
package foobar
			</pre>
			<h2>See</h2>
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L517">github.com</a>
				</li>
				<li>
					<a href="https://golang.org/doc/effective_go.html">golang.org</a>
				</li>
			</ul>]]>

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:LeadingK</key>
		<name>don't use leading k in Go names</name>
		<internalKey>golint:LeadingK</internalKey>
		<description>
		<![CDATA[<p>don't use leading k in Go names; kFoo or kfoo should be
				Foo or foo
			</p>

			<h2>Noncompliant Code Example</h2>
			<pre>
kFoo:=1
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
Foo:=1
foo:=1
			</pre>


			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L517">github.com</a>
				</li>
				<li>
					<a href="https://golang.org/doc/effective_go.html">golang.org</a>
				</li>
			</ul>]]>

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:UnderscoreInGoName</key>
		<name>don't use underscores in Go names</name>
		<internalKey>golint:UnderscoreInGoName</internalKey>
		<description>
			<![CDATA[	<p>don't use underscores in Go names.</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
foo_bar:=1
type struct foo_bar{
}
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
fooBar:=1
//Foobar
type struct FooBar{
}
//fooBar
type struct fooBar{
}
			</pre>
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L517">github.com</a>
				</li>
				<li>
					<a href="https://golang.org/doc/effective_go.html">golang.org</a>
				</li>
			</ul>]]>

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ErrorLastReturn</key>
		<name>error should be the last type when returning multiple items
		</name>
		<internalKey>golint:ErrorLastReturn</internalKey>
		<description>
		<![CDATA[<p>error should be the last type when returning multiple
				items.
			</p>

			<h2>Noncompliant Code Example</h2>
			<pre>
func foo(a int)(error,int){

}
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
func foo(a int)(int,error){

}
			</pre>


			<h2>See</h2>
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L1263">github.com</a>
				</li>
			</ul>]]>

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>arg-order</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ErrorEndString</key>
		<name>error strings should not be capitalized or end with punctuation
			or a newline
		</name>
		<internalKey>golint:ErrorEndString</internalKey>
		<description>
			<![CDATA[error strings should not be capitalized or end with
			punctuation or a
			newline.

			<h2>Noncompliant Code Example</h2>
			<pre>
fmt.Errorf("Something bad")
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
fmt.Errorf("something bad")
			</pre>

			<h2>See</h2>
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L1169">github.com</a>
				</li>
				<li>
					<a
						href="https://github.com/golang/go/wiki/CodeReviewComments#error-strings">Code review</a>
				</li>
			</ul>]]>


		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>errors</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ErrorVarName</key>
		<name>error var err should have name of the form errFoo</name>
		<internalKey>golint:ErrorVarName</internalKey>
		<description>
			<![CDATA[<p>error var err should have name of the form errFoo.</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
file, err := os.Open("file.go") // For read access.
if err != nil {
log.Fatal(err)
}


			</pre>
			<h2>Compliant Solution</h2>
			<pre>
file, errCreateFile := os.Open("file.go") // For read access.
if errCreateFile != nil {
	log.Fatal(err)
}
			</pre>
			<h2>See</h2>
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L1115">Golint at github.com</a>
				</li>
			</ul>]]>

		</description>
		<descriptionFormat>HTML</descriptionFormat>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:AnnoyingUseExportedType</key>
		<name>exported function returns unexported type</name>
		<internalKey>golint:AnnoyingUseExportedType</internalKey>
		<description>
			<![CDATA[
				<p>exported function returns unexported type, which can be
			annoying to use.</p>
			
			<h2>Noncompliant Code Example</h2>
			<pre>
				
				
func GetMyInstance *unexportedType(){
		....
				
}

			</pre>
			<h2>Compliant Solution</h2>
			<pre>
func GetMyInstance *ExportedType(){
		 ....
}
			</pre>
			
			
			<h2>See</h2>
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L1287">Golint at github.com</a>
				</li>
			</ul>
			
			]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>unexported-type-in-api</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:IfBlockReturn</key>
		<name>if block ends with a return statement, so drop this else and
			outdent its block
		</name>
		<internalKey>golint:IfBlockReturn</internalKey>
		<description>
		<![CDATA[
			<p>if block ends with a return statement, so drop this else
			and outdent its block.</p>
			
			<h2>Noncompliant Code Example</h2>
			<pre>
func get(i int) int {
    if f := i * 2; f == 6 {
        return f
    } else {
        return f * 3
    }
}


			</pre>
			<h2>Compliant Solution</h2>
			<pre>
func get(i int) int {
    f := i * 2
    if f == 6 {
        return f
    }
    return f * 3
}
			</pre>
			
			<h2>See</h2>
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L1007">Golint at github.com</a>
				</li>
			</ul>
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>indent</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:PackageCommentForm</key>
		<name>package comment</name>
		<internalKey>golint:PackageCommentForm</internalKey>
		<description>
		<![CDATA[
		
			<p>package comment should be of the form "NamePackage...".</p>
			
			<h2>Noncompliant Code Example</h2>
			<pre>
//the package main is the entry point
package main

			</pre>
			<h2>Compliant Solution</h2>
			<pre>
//main is the entry point 
package main
			</pre>
			
			
			<h2>See</h2>
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L352">Golint at github.com</a>
				</li>
			</ul>
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:PackageCommentSpace</key>
		<name>package not have leading space</name>
		<internalKey>golint:PackageCommentSpace</internalKey>
		<description>
		<![CDATA[
			<p>package comment should not have leading space.</p>
			
			<h2>See</h2>
			<ul>
				<li><a href="https://github.com/golang/lint/blob/master/lint.go#L352">Golint at github.com</a></li>
			</ul>		
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>


	<rule>
		<key>golint:ReceiverNameConsistent</key>
		<name>receiver name should be consistent</name>
		<internalKey>golint:ReceiverNameConsistent</internalKey>
		<description>
			receiver name %s should be consistent with previous
			receiver name %s for %s.
			Additional information can be found at
			https://github.com/golang/lint/blob/master/lint.go#L1202
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ReceiverNameReflection</key>
		<name>receiver name should be a reflection</name>
		<internalKey>golint:ReceiverNameReflection</internalKey>
		<description>
		
			<![CDATA[
				<p>receiver name should be a reflection of its identity;
			don't use generic names such as "this" or "self"</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
func(this rect) area() float64(){
	...
}

			</pre>
			<h2>Compliant Solution</h2>
			<pre>
func(r rect) area() float64(){
	...
}
			</pre>
			<h2>See</h2>
			<ul>
				<li><a href="https://github.com/golang/lint/blob/master/lint.go#L1202">Golint at github.com</a></li>
			</ul>
			
			]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ReceiverNameNotUnderscore</key>
		<name>receiver name should not be an underscore</name>
		<internalKey>golint:ReceiverNameNotUnderscore</internalKey>
		<description>
			<![CDATA[
			<p>receiver name should not be an underscore.</p>
			<h2>See</h2>
				<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L1202">Golint at github.com</a>
				</li>
				</ul>
			]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:DropAssignment</key>
		<name>drop assignment</name>
		<internalKey>golint:DropAssignment</internalKey>
		<description>
		<![CDATA[
		<p>should drop assignment; it is the zero value.</p>
		<h2>See</h2>
		<ul>
			<li><a href="https://github.com/golang/lint/blob/master/lint.go#L929">Golint at github.com</a></li>
		</ul>
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>zero-value</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:HavePackageComment</key>
		<name>Should have a package comment</name>
		<internalKey>golint:HavePackageComment</internalKey>
		<description><![CDATA[
			<p>should have a package comment, unless it's in another
			file for this package.</p>
			<h2>See</h2>
			<ul>
			<li><a href="https://github.com/golang/lint/blob/master/lint.go#L352">GoLint at githubcom/a></li>
			</ul>
			
		]]>
			
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:NotUseBasicType</key>
		<name>should not use basic type</name>
		<internalKey>golint:NotUseBasicType</internalKey>
		<description><![CDATA[
			<p> should not use basic type as key in context.WithValue.</p>
			<h2>See</h2>
			<ul>
			<li>
			<a href="https://github.com/golang/lint/blob/master/lint.go#L1400">Golint at github.com</a>
			</li>
			</ul>
		]]>
			Additional information can be found at
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>context</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:NotUseDotImport</key>
		<name>should not use dot imports</name>
		<internalKey>golint:NotUseDotImport</internalKey>
		<description><![CDATA[
		<p>should not use dot imports.</p>
		<h2>See</h2>
			<ul>
			<li>
			<a href="https://github.com/golang/lint/blob/master/lint.go#L440">Golint at github.com</a>
			</li>
			</ul>
		
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>imports</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:Omit2ndValueFromRange</key>
		<name>should omit 2nd value from range</name>
		<internalKey>golint:Omit2ndValueFromRange</internalKey>
		<description><![CDATA[
			<p>should omit 2nd value from range; this loop is equivalent
			to `for %s %s range ...`.</p>
			<h2>See</h2>
			<ul>
			<li>
			<a href="https://github.com/golang/lint/blob/master/lint.go#L1051">Golint at github.com</a>
			</li>
			</ul>
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>range-loop</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:OmitType</key>
		<name>should omit type %s from declaration of var %s</name>
		<internalKey>golint:OmitType</internalKey>
		<description><![CDATA[
			<p>should omit type %s from declaration of var %s; it will
			be inferred from
			the right-hand side.</p>
			<h2>See</h2>
			<ul>
			<li>
			<a href="https://github.com/golang/lint/blob/master/lint.go#L929">Golint at github.com</a>
			</li>
			</ul>
		
		
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>type-inference</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>golint:ReplaceLintIncDec</key>
		<name>should replace</name>
		<internalKey>golint:ReplaceLintIncDec</internalKey>
		<description><![CDATA[
		
		<p>
			should replace x=x+1(respectively x=x-1) with x++
			(respectively x--).
		</p>
		<h2>See</h2>
		<ul>
			<li>
			<a href="https://github.com/golang/lint/blob/master/lint.go#L1235">Golint at github.com</a>
			</li>
			</ul>
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ReplaceSprintf</key>
		<name>should replace Sprintf by Errorf</name>
		<internalKey>golint:ReplaceSprintf</internalKey>
		<description><![CDATA[
			<p>should replace %s(fmt.Sprintf(...)) with %s.Errorf(...).</p>
			<h2>See</h2>
			<ul>
			<li>
			<a href="https://github.com/golang/lint/blob/master/lint.go#L1077">Golint at github.com</a>
			</li>
			</ul>
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:Initialisms</key>
		<name>Initialisms</name>
		<internalKey>golint:Initialisms</internalKey>
		<description><![CDATA[
			<p>
				Words in names that are initialisms or acronyms (e.g.
			"URL" or "NATO") have a consistent case. For example, "URL" should
			appear as "URL" or "url" (as in "urlPony", or "URLPony"), never as
			"Url". Here's an example: ServeHTTP not ServeHttp.
			
			</p>
			<h2>See</h2>
			<ul>
			<li>
			<a href="https://github.com/golang/go/wiki/CodeReviewComments#initialisms">Code review at github.com</a>
			</li>
			</ul>
		
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:PackageNames</key>
		<name>Package names</name>
		<internalKey>golint:PackageNames</internalKey>
		<description><![CDATA[
		<p>All references to names in your package will be done
			using the package name, so you can omit that name from the
			identifiers.</p>
		<h2>See</h2>
		<ul>
			<li>
				<a href="https://github.com/golang/go/wiki/CodeReviewComments#package-names" >Code review at github.com</a>
				<a href="https://github.com/golang/lint/blob/master/lint.go#L887" >Golint at github.com</a>
			</li>
		</ul>
		
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:BlankImport</key>
		<name>a non-main package has blank imports</name>
		<internalKey>golint:BlankImport</internalKey>
		<description><![CDATA[
		<p>
			a blank import should be only in a main or test package,
			or have a comment justifying it
		</p>
		
		<h2>See</h2>
		<ul>
			<li>
				<a href="https://github.com/golang/lint/blob/master/lint.go#L408">Golint at github.com</a>
				<a href="https://github.com/golang/go/wiki/CodeReviewComments#package-comments">Code review at github.com</a>
			</li>
		</ul>
		
		
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>imports</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:CommentExportedType</key>
		<name>comment on exported type</name>
		<internalKey>golint:CommentExportedType</internalKey>
		<description><![CDATA[
			<p>comment on exported type should be of the form "Type
			..." (with optional leading article)
			</p>	
			
				<h2>See</h2>
		<ul>
			<li>
				<a href="https://github.com/golang/lint/blob/master/lint.go#L761">Golint at github.com</a>
				<a href="https://github.com/golang/go/wiki/CodeReviewComments#doc-comments">Code review at github.com</a>
			</li>
		</ul>
		
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>


	<rule>
		<key>golint:ContextContextFirstArg</key>
		<name>context.Context should be the first argument</name>
		<internalKey>golint:ContextContextFirstArgs</internalKey>
		<description>
		
			<![CDATA[
				<p>context.Context should be the first parameter of a
			function</p>
			
				<h2>See</h2>
		<ul>
			<li>
				<a href="https://github.com/golang/lint/blob/master/lint.go#L1426">Golint at github.com</a>
				<a href="https://golang.org/pkg/context/">Golang</a>
			</li>
		</ul>
				
			]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>arg-order</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ExportedHaveComment</key>
		<name>exported * should have comment</name>
		<internalKey>golint:ExportedHaveComment</internalKey>
		<description><![CDATA[
			<p>exported [type|var|method|struct] should have comment or be unexported</p>
						<h2>Noncompliant Code Example</h2>
			<pre>
type Atype struct{
}
			
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
//Atype ....
type Atype struct{
}
//or
type aType struct{
}
			
			
			<h2>See</h2>
		<ul>
			<li>
				<a href="https://github.com/golang/lint/blob/master/lint.go#L794">Golint at github.com</a>
			</li>
		</ul>
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ExportedHaveComment2</key>
		<name>exported * should have comment</name>
		<internalKey>golint:ExportedHaveComment2</internalKey>
		<description><![CDATA[
			<p>exported type should have comment or be unexported</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
type Atype struct{
}
			
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
//Atype ....
type Atype struct{
}
//or
type aType struct{
}
			</pre>
			
			<h2>See</h2>
			
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L834">Golint at github.com</a>
				</li>
			</ul>
		]]>
			exported %s %s should have comment or be unexported
			Additional information can be found at
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ExportedDeclaration</key>
		<name>exported * should have its own declaration</name>
		<internalKey>ExportedDeclaration</internalKey>
		<description><![CDATA[
			<p>exported %s %s should have its own declaration</p>
				<h2>See</h2>
			
			<ul>
				<li>
					<a href="https://github.com/golang/lint/blob/master/lint.go#L834">Golint at github.com</a>
				</li>
			</ul>
		
		]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>


	<rule>
		<key>golint:SpecificSuffix</key>
		<name>don't use unit-specific suffix</name>
		<internalKey>golint:SpecificSuffix</internalKey>
		<description><![CDATA[<p>var fooSec is of type time.Duration; don't use unit-specific suffix Sec</p>
			
			<h2>Noncompliant Code Example</h2>
			<pre>
seconds := 10
timeSec:=time.Duration(seconds)*time.Second
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
seconds := 10
time:=time.Duration(seconds)*time.Second
			</pre>
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://github.com/golang/lint/blob/master/lint.go#L1343">github.com</a>
			</li>
			</ul>
				]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>time</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>gocyclo:CyclomaticComplexity</key>
		<name>Cyclomatic complexity is high</name>
		<internalKey>gocyclo:CyclomaticComplexity</internalKey>
		<description><![CDATA[<p>The cyclomatic complexity is greater than 10</p>]]>

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>complexity</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>errcheck:ValueNotChecked</key>
		<name>Return value not checked</name>
		<internalKey>errcheck:ValueNotChecked</internalKey>
		<description><![CDATA[<p>The return value of the function is not checked</p>]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<tag>check</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>unconvert:UnnecessaryConversion</key>
		<name>Unnecessary Conversion</name>
		<internalKey>unconvert:UnnecessaryConversion</internalKey>
		<description><![CDATA[<p>Unnecessary Conversion</p>]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>simple</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>structcheck:UnusedStructField</key>
		<name>unused struct field</name>
		<internalKey>structcheck:UnusedStructField</internalKey>
		<description><![CDATA[<p>unused struct field</p>]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>check</tag>
		<tag>unused</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:ChannelInsteadSelect</key>
		<name>Channel instead select</name>
		<internalKey>gosimple:ChannelInsteadSelect</internalKey>
		<description><![CDATA[
			<p>Should use a simple channel send/receive instead of select with a
			single case</p>
		]]>
			
		</description>

		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>simple</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>ineffassign:IneffectualAssignment</key>
		<name>Ineffectual assignment</name>
		<internalKey>ineffassign:IneffectualAssignment</internalKey>
		<description><![CDATA[<p>Ineffectual assignment of the variable.</p>]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>unused</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gas:UnhandledErrors</key>
		<name>Unhandled errors</name>
		<internalKey>gas:UnhandledErrors</internalKey>
		<description><![CDATA[<p>Unhandled errors.</p>]]>
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>unhandled</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gas:SQLFormatting</key>
		<name>SQL formatting</name>
		<internalKey>gas:SQLFormatting</internalKey>
		<description><![CDATA[<p>SQL string formatting.</p>]]>

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>VULNERABILITY</type>
		<tag>sql</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gas:SQLConcatenation</key>
		<name>SQL concatenation</name>
		<internalKey>gas:SQLConcatenation</internalKey>
		<description><![CDATA[<p>SQL string concatenation.</p>]]>

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>VULNERABILITY</type>
		<tag>sql</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gas:RSAKeyLength</key>
		<name>RAS key length</name>
		<internalKey>gas:RSAKeyLength</internalKey>
		<description><![CDATA[<p>RSA keys should be at least 2048 bits.</p>]]>

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>VULNERABILITY</type>
		<tag>rsa</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gas:UnsafeCall</key>
		<name>Unsafe call</name>
		<internalKey>gas:UnsafeCall</internalKey>
		<description><![CDATA[<p>Use of unsafe calls</p>]]>

		</description>
		<severity>INFO</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>VULNERABILITY</type>
		<tag>unsafe</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gas:UnescapedHTMLTemplates</key>
		<name>Unsafe Unescaped HTML Templates</name>
		<internalKey>gas:UnescapedHTMLTemplates</internalKey>
		<description><![CDATA[<p>Use of unescaped data in HTML templates</p>]]>

		</description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>VULNERABILITY</type>
		<tag>html</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gas:WeakCrypto</key>
		<name>Use of weak cryptographic primitive</name>
		<internalKey>gas:WeakCrypto</internalKey>
		<description><![CDATA[<p>Use of weak cryptographic primitive</p>]]>

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>VULNERABILITY</type>
		<tag>crypto</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>goimports:FileNotImported</key>
		<name>File not imported</name>
		<internalKey>goimports:FileNotImported</internalKey>
		<description><![CDATA[<p>File not imported.</p>]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>imports</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>vet:FormatingPrintfFamily</key>
		<name>possible formatting directive in Print family</name>
		<internalKey>vet:FormatingPrintfFamily</internalKey>
		<description><![CDATA[
		<p>Suspicious calls to functions in the Printf family, including any functions with these names</p>
			<h2>Noncompliant Code Example</h2>
			<pre>
fmt.Print("a string with format: %d %s")
fmt.Fatal("a string with format: %d %s")
fmt.Error("a string with format: %d %s")
			</pre>
			<h2>Compliant Solution</h2>
			<pre>
fmt.Printf("a string with format: %d %s")
fmt.Fatalf("a string with format: %d %s")
fmt.Errorf("a string with format: %d %s")
			</pre>
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>imports</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	
		<rule>
		<key>golint:StructFieldInitialisms</key>
		<name>acronyms field should be uppercase</name>
		<internalKey>golint:StructField</internalKey>
		<description><![CDATA[
		<h2>See</h2>
			<ul>
			<li>
				<a href="https://github.com/golang/go/wiki/CodeReviewComments#initialisms">golang.org Initialisms</a>
			</li>
			</ul>
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>imports</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
			<rule>
		<key>vet:Unreachable</key>
		<name>Unreachable code</name>
		<internalKey>vet:Unreachable</internalKey>
		<description><![CDATA[
			<p>Unreachable code</p>
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>imports</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	
	
	
	
				<rule>
		<key>vet:Misuse</key>
		<name>possible misuse of unsafe.Pointer</name>
		<internalKey>vet:Misuse</internalKey>
		<description><![CDATA[
			<p>Likely incorrect uses of unsafe.Pointer to convert integers to pointers. A conversion from uintptr to unsafe.Pointer is invalid if it implies that there is a uintptr-typed word in memory that holds a pointer value, because that word will be invisible to stack copying and to the garbage collector.  </p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://golang.org/cmd/vet/#hdr-Misuse_of_unsafe_Pointers">golang.org Vet</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>imports</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
			
			
			<rule>
		<key>vet:Shadow</key>
		<name>Variables is shadowed</name>
		<internalKey>vet:Shadow</internalKey>
		<description><![CDATA[
			<p>Variables that may have been unintentionally shadowed. </p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://golang.org/cmd/vet/#hdr-Shadowed_variables">golang.org Vet</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>imports</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	
	
	<rule>
		<key>vet:Lock</key>
		<name>Copying locks</name>
		<internalKey>vet:Lock</internalKey>
		<description><![CDATA[
			<p>Locks that are erroneously passed by value.  </p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://golang.org/cmd/vet/#hdr-Copying_locks">golang.org Vet</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>imports</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>durcheck:TimeDurationMeans</key>
		<name>implicit time.Duration</name>
		<internalKey>durcheck:TimeDurationMeans</internalKey>
		<description><![CDATA[
			<p>Implicit time.Duration means nanoseconds.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://golang.org/pkg/time/#Duration">golang.org</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>time</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>3min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>prealloc:Preallocation</key>
		<name>Consider preallocation</name>
		<internalKey>prealloc:Preallocation</internalKey>
		<description><![CDATA[
			<p>The slice should be preallocated and initialized with built-in make function.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://blog.golang.org/go-slices-usage-and-internals">blog.golang.org</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>performance</tag>
		<tag>zero-value</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>badtime:MapTimeKey</key>
		<name>Map stores time.Time as a key</name>
		<internalKey>badtime:MapTimeKey</internalKey>
		<description><![CDATA[
			<p>Storing an instance of time.Time as part of a map key is not recommended. While an instance of time.Time can be safely stored as part of the key of a map, it's very easy to introduce subtle bugs this way and it's often much safer to use something like an int64 to store a unix timestamp at nanosecond resolution instead.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://golang.org/src/time/time.go?#L101">golang.org</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>time</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>badtime:TimeComparison</key>
		<name>Comparison time.Time using == instead of .Equal()</name>
		<internalKey>badtime:TimeComparison</internalKey>
		<description><![CDATA[
			<p>This issue can be particularly troublesome for projects upgrading to Golang 1.9 because in previous versions of Golang, two instances of time.Time for the same moment of time would only not be == to each other if they represented different timezones, whereas in Golang 1.9 and later they can also not be == to each other if one contains a monotonic bit and the other does not.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://golang.org/src/time/time.go?#L101">golang.org</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>time</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>goconst:OtherOccur</key>
		<name>Another occurance of the variable has been found</name>
		<internalKey>goconst:OtherOccur</internalKey>
		<description><![CDATA[
			<p>There are obvious benefits to using constants instead of repeating strings, mostly to ease maintenance. Cannot argue against changing a single constant versus many strings.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://github.com/jgautheron/goconst">github.com</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>goconst:MatchingConst</key>
		<name>A matching constant has been found</name>
		<internalKey>goconst:MatchingConst</internalKey>
		<description><![CDATA[
			<p>There are obvious benefits to using constants instead of repeating strings, mostly to ease maintenance. Cannot argue against changing a single constant versus many strings.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://github.com/jgautheron/goconst">github.com</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1001</key>
		<name>Copy() for slices</name>
		<internalKey>gosimple:S1001</internalKey>
		<description><![CDATA[
			<p>Use copy() for copying elements from one slice to another.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1002</key>
		<name>Cimparison to bool</name>
		<internalKey>gosimple:S1002</internalKey>
		<description><![CDATA[
			<p>Use `if x {}` instead of `if x == true {}`</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1000</key>
		<name>Select with a single case</name>
		<internalKey>gosimple:S1000</internalKey>
		<description><![CDATA[
			<p>select with a single case can be replaced with a simple send or receive.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1003</key>
		<name>strings.Index instead of strings.Contains</name>
		<internalKey>gosimple:S1003</internalKey>
		<description><![CDATA[
			<p>Should use `if strings.Contains(x, y) {}` instead of `if strings.Index(x, y) != -1 {}`</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1004</key>
		<name>bytes.Compare</name>
		<internalKey>gosimple:S1004</internalKey>
		<description><![CDATA[
			<p>Should use `bytes.Equal` instead of `bytes.Compare`</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1005</key>
		<name>Unnecessary blank identifier</name>
		<internalKey>gosimple:S1005</internalKey>
		<description><![CDATA[
			<p>Should use `for range s{}` instead of `for _ = range s {}`</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1005Map</key>
		<name>Unnecessary blank identifier</name>
		<internalKey>gosimple:S1005Map</internalKey>
		<description><![CDATA[
			<p>Should use `x = someMap[key]` instead of `x, _ = someMap[key]`</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1005Chan</key>
		<name>Unnecessary blank identifier</name>
		<internalKey>gosimple:S1005Chan</internalKey>
		<description><![CDATA[
			<p>Should use `<- ch` instead of `_ = <- ch`</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1007</key>
		<name>Avoid double escaping</name>
		<internalKey>gosimple:S1007</internalKey>
		<description><![CDATA[
			<p>Raw string literals use ` instead of " and do not support any escape sequences. This means that the backslash (\) can be used freely, without the need of escaping.

Since regular expressions have their own escape sequences, raw strings can improve their readability.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1008</key>
		<name>Returning bool</name>
		<internalKey>gosimple:S1008</internalKey>
		<description><![CDATA[
			<p>Boolean can be returned as `return <expr>`</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
	<rule>
		<key>gosimple:S1009</key>
		<name>nil check for len()</name>
		<internalKey>gosimple:S1009</internalKey>
		<description><![CDATA[
			<p>The len function is defined for all slices, even nil ones, which have a length of zero. It is not necessary to check if a slice is not nil before checking that its length is not zero.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1010</key>
		<name>Default slice index</name>
		<internalKey>gosimple:S1010</internalKey>
		<description><![CDATA[
			<p>When slicing, the second index defaults to the length of the value, making s[n:len(s)] and s[n:] equivalent.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1011</key>
		<name>Concatenating two slices</name>
		<internalKey>gosimple:S1011</internalKey>
		<description><![CDATA[
			<p>Use a single append to concatenate two slices: x = append(x, y...)</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1012</key>
		<name>Time substraction</name>
		<internalKey>gosimple:S1012</internalKey>
		<description><![CDATA[
			<p>The time.Since helper has the same effect as using time.Now().Sub(x) but is easier to read.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>time</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1013</key>
		<name>Returning error</name>
		<internalKey>gosimple:S1013</internalKey>
		<description><![CDATA[
			<p>Should not check if err is nil, just `return err`</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1016</key>
		<name>Type conversion</name>
		<internalKey>gosimple:S1016</internalKey>
		<description><![CDATA[
			<p>Two struct types with identical fields can be converted between each other. In older versions of Go, the fields had to have identical struct tags. Since Go 1.8, however, struct tags are ignored during conversions. It is thus not necessary to manually copy every field individually.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1017</key>
		<name>Manual slicing over string</name>
		<internalKey>gosimple:S1017</internalKey>
		<description><![CDATA[
			<p>Instead of using strings.HasPrefix and manual slicing, use the strings.TrimPrefix function. If the string doesn't start with the prefix, the original string will be returned. Using strings.TrimPrefix reduces complexity, and avoids common bugs, such as off-by-one mistakes.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1018</key>
		<name>Doubling slice using loop</name>
		<internalKey>gosimple:S1018</internalKey>
		<description><![CDATA[
			<p>copy() permits using the same source and destination slice, even with overlapping ranges. This makes it ideal for sliding elements in a slice: copy(bs[:n], bs[offset:])</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1019Slice</key>
		<name>make() for slice</name>
		<internalKey>gosimple:S1019Slice</internalKey>
		<description><![CDATA[
			<p>The make function has default values for the length and capacity arguments. For channels and maps, the length defaults to zero. Additionally, for slices the capacity defaults to the length.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1019Map</key>
		<name>make() for map</name>
		<internalKey>gosimple:S1019Map</internalKey>
		<description><![CDATA[
			<p>The make function has default values for the length and capacity arguments. For channels and maps, the length defaults to zero. Additionally, for slices the capacity defaults to the length.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1019Chan</key>
		<name>make() for channel</name>
		<internalKey>gosimple:S1019Chan</internalKey>
		<description><![CDATA[
			<p>The make function has default values for the length and capacity arguments. For channels and maps, the length defaults to zero. Additionally, for slices the capacity defaults to the length.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1021</key>
		<name>Variable declaration and assignment</name>
		<internalKey>gosimple:S1021</internalKey>
		<description><![CDATA[
			<p>Should merge variable declaration and assignment: var x uint = 1</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1020</key>
		<name>Nil check in type assertion</name>
		<internalKey>gosimple:S1020</internalKey>
		<description><![CDATA[
			<p>Omit redundant nil check in type assertion</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>gosimple:S1023</key>
		<name>Redundant return statement</name>
		<internalKey>gosimple:S1023</internalKey>
		<description><![CDATA[
			<p>Functions that have no return value do not need a return statement as the final statement of the function.

Switches in Go do not have automatic fallthrough, unlike languages like C. It is not necessary to have a break statement as the final statement in a case block.
</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
	<rule>
		<key>gosimple:S1024</key>
		<name>time.Sub()</name>
		<internalKey>gosimple:S1024</internalKey>
		<description><![CDATA[
			<p>The time.Until helper has the same effect as using x.Sub(time.Now()) but is easier to read.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>time</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
	<rule>
		<key>gosimple:S1025ArgIsStr</key>
		<name>fmt.Sprintf()</name>
		<internalKey>gosimple:S1025ArgIsStr</internalKey>
		<description><![CDATA[
			<p>In many instances, there are easier and more efficient ways of getting a value's string representation. Whenever a value's underlying type is a string already, or the type has a String method, they should be used directly.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
	<rule>
		<key>gosimple:S1025TypeIsStr</key>
		<name>fmt.Sprintf()</name>
		<internalKey>gosimple:S1025TypeIsStr</internalKey>
		<description><![CDATA[
			<p>In many instances, there are easier and more efficient ways of getting a value's string representation. Whenever a value's underlying type is a string already, or the type has a String method, they should be used directly.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
	<rule>
		<key>gosimple:S1025StringNotSprintf</key>
		<name>fmt.Sprintf()</name>
		<internalKey>gosimple:S1025StringNotSprintf</internalKey>
		<description><![CDATA[
			<p>In many instances, there are easier and more efficient ways of getting a value's string representation. Whenever a value's underlying type is a string already, or the type has a String method, they should be used directly.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
	<rule>
		<key>gosimple:S1028</key>
		<name>errors</name>
		<internalKey>gosimple:S1028</internalKey>
		<description><![CDATA[
			<p>Replace with fmt.Errorf</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
	<rule>
		<key>gosimple:S1029</key>
		<name>Range over the string</name>
		<internalKey>gosimple:S1029</internalKey>
		<description><![CDATA[
			<p>Ranging over a string will yield byte offsets and runes. If the offset isn't used, this is functionally equivalent to converting the string to a slice of runes and ranging over that. Ranging directly over the string will be more performant, however, as it avoids allocating a new slice, the size of which depends on the length of the string.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
	<rule>
		<key>gosimple:S1030StringNotBytes</key>
		<name>Use bytes.Buffer.String or bytes.Buffer.Bytes</name>
		<internalKey>gosimple:S1030StringNotBytes</internalKey>
		<description><![CDATA[
			<p>bytes.Buffer has both a String and a Bytes method. It is never necessary to use string(buf.Bytes()) or []byte(buf.String()) â simply use the other method.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
	<rule>
		<key>gosimple:S1030BytesNotString</key>
		<name>Use bytes.Buffer.String or bytes.Buffer.Bytes</name>
		<internalKey>gosimple:S1030BytesNotString</internalKey>
		<description><![CDATA[
			<p>bytes.Buffer has both a String and a Bytes method. It is never necessary to use string(buf.Bytes()) or []byte(buf.String()) â simply use the other method.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
	<rule>
		<key>gosimple:S1031</key>
		<name>redundant nil check around loop</name>
		<internalKey>gosimple:S1031</internalKey>
		<description><![CDATA[
			<p>You can use range on nil slices and maps, the loop will simply never execute. This makes an additional nil check around the loop unnecessary.</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://staticcheck.io/docs/gosimple">staticcheck.io</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
	<rule>
		<key>gofmt:NotFormatted</key>
		<name>gofmt</name>
		<internalKey>gofmt:NotFormatted</internalKey>
		<description><![CDATA[
			<p>file is not gofmted with -s</p>
			
			<h2>See</h2>
			<ul>
			<li>
				<a href="https://golang.org/cmd/gofmt/">golang.org</a>
			</li>
			</ul>
			
		]]>
			
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>1min</remediationFunctionBaseEffort>
	</rule>	
</go-rules>
